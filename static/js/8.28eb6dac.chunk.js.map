{"version":3,"sources":["components/login/Login.tsx"],"names":["Login","isAuth","useAppSelector","state","auth","dispatch","useDispatch","formik","useFormik","initialValues","email","password","rememberMe","onSubmit","values","login","resetForm","validate","errors","test","length","to","container","justifyContent","item","handleSubmit","label","margin","getFieldProps","touched","style","color","borderColor","type","control","variant"],"mappings":"+OAiFeA,UAjEA,WACV,IAAMC,EAASC,aAAe,SAAAC,GAAK,OAAEA,EAAMC,KAAKH,MAAb,IAC7BI,EAAWC,cACXC,EAASC,YAAU,CACrBC,cAAe,CACXC,MAAO,GACPC,SAAU,GACVC,YAAY,GAEhBC,SAAU,SAAAC,GACPT,EAASU,YAAMD,IACdP,EAAOS,WACV,EACDC,SAAU,SAACH,GACP,IAAMI,EAA0B,CAAC,EAWjC,OAVKJ,EAAOJ,MAEA,4CAA4CS,KAAKL,EAAOJ,SAChEQ,EAAOR,MAAQ,yBAFfQ,EAAOR,MAAQ,WAIdI,EAAOH,SAEDG,EAAOH,SAASS,OAAS,IAChCF,EAAOP,SAAW,2CAFlBO,EAAOP,SAAW,WAIfO,CACV,IAEL,OAAIjB,EACO,cAAC,IAAD,CAAUoB,GAAI,MAEnB,cAAC,IAAD,CAAMC,WAAS,EAACC,eAAgB,SAAhC,SACH,cAAC,IAAD,CAAMC,MAAI,EAACD,eAAgB,SAA3B,SACI,sBAAMV,SAAUN,EAAOkB,aAAvB,SACI,cAAC,IAAD,UACI,eAAC,IAAD,WACI,cAAC,IAAD,aAAWC,MAAM,QACNC,OAAO,UACHpB,EAAOqB,cAAc,WAEnCrB,EAAOsB,QAAQnB,OAASH,EAAOW,OAAOR,MACnC,qBAAKoB,MAAO,CAACC,MAAO,MAAOC,YAAa,OAAxC,SAAkDzB,EAAOW,OAAOR,QAChE,KACJ,cAAC,IAAD,aAAWuB,KAAK,WACLP,MAAM,WACNC,OAAO,UACHpB,EAAOqB,cAAc,cAEnCrB,EAAOsB,QAAQlB,UAAYJ,EAAOW,OAAOP,SACtC,qBAAKmB,MAAO,CAACC,MAAO,OAApB,SAA6BxB,EAAOW,OAAOP,WAC3C,KACJ,cAAC,IAAD,aAAkBe,MAAO,cACPQ,QAAS,cAAC,IAAD,KACL3B,EAAOqB,cAAc,gBAE3C,cAAC,IAAD,CAAQK,KAAM,SAAUE,QAAS,YAAaJ,MAAO,UAArD,6BASvB,C","file":"static/js/8.28eb6dac.chunk.js","sourcesContent":["import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {navigate} from \"@reach/router\";\r\nimport { Navigate } from 'react-router-dom';\r\nimport {useAppSelector} from \"../../redux/redux-store\";\r\n\r\n const Login = () => {\r\n     const isAuth = useAppSelector(state=>state.auth.isAuth )\r\n     const dispatch = useDispatch()\r\n     const formik = useFormik({\r\n         initialValues: {\r\n             email: '',\r\n             password: '',\r\n             rememberMe: false,\r\n         },\r\n         onSubmit: values => {\r\n            dispatch(login(values))\r\n             formik.resetForm()\r\n         },\r\n         validate: (values) => {\r\n             const errors: FormikErrorType = {};\r\n             if (!values.email) {\r\n                 errors.email = 'Required';\r\n             } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                 errors.email = 'Invalid email address';\r\n             }\r\n             if (!values.password) {\r\n                 errors.password = 'Required';\r\n             } else if (values.password.length < 4) {\r\n                 errors.password = 'Password mast be more than 2 characters'\r\n             }\r\n             return errors;\r\n         },\r\n     })\r\n     if (isAuth) {\r\n         return <Navigate to={'/'}/>\r\n     }\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormGroup>\r\n                        <TextField label=\"Email\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email ? (\r\n                            <div style={{color: 'red', borderColor: 'red' }}>{formik.errors.email}</div>\r\n                        ) : null}\r\n                        <TextField type=\"password\"\r\n                                   label=\"Password\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password ? (\r\n                            <div style={{color: 'red'}}>{formik.errors.password}</div>\r\n                        ) : null}\r\n                        <FormControlLabel label={'Remember me'}\r\n                                          control={<Checkbox/>}\r\n                                          {...formik.getFieldProps('rememberMe')}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n\r\n        </Grid>\r\n    </Grid>\r\n}\r\nexport default Login\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n"],"sourceRoot":""}