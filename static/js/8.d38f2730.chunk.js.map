{"version":3,"sources":["components/login/Login.tsx"],"names":["Login","isAuth","useAppSelector","state","auth","captchaUrl","dispatch","useDispatch","formik","useFormik","initialValues","email","password","rememberMe","captcha","undefined","onSubmit","values","login","resetForm","validate","errors","test","length","to","container","justifyContent","item","handleSubmit","label","margin","getFieldProps","touched","style","color","borderColor","type","control","src","alt","variant"],"mappings":"+OAyFeA,UA3ED,WACV,IAAMC,EAASC,aAAe,SAAAC,GAAK,OAAIA,EAAMC,KAAKH,MAAf,IAC7BI,EAAaH,aAAe,SAAAC,GAAK,OAAIA,EAAMC,KAAKC,UAAf,IACjCC,EAAWC,cACXC,EAASC,YAAU,CACrBC,cAAe,CACXC,MAAO,GACPC,SAAU,GACVC,YAAY,EACZC,aAASC,GAEbC,SAAU,SAAAC,GACNX,EAASY,YAAMD,IACfT,EAAOW,WACV,EACDC,SAAU,SAACH,GACP,IAAMI,EAA0B,CAAC,EAWjC,GAVKJ,EAAON,MAEA,4CAA4CW,KAAKL,EAAON,SAChEU,EAAOV,MAAQ,yBAFfU,EAAOV,MAAQ,WAIdM,EAAOL,SAEDK,EAAOL,SAASW,OAAS,IAChCF,EAAOT,SAAW,2CAFlBS,EAAOT,SAAW,WAIjBK,EAAOH,QAGZ,OAAOO,EAFHA,EAAOP,QAAU,UAGxB,IAEL,OAAIb,EACO,cAAC,IAAD,CAAUuB,GAAI,MAElB,cAAC,IAAD,CAAMC,WAAS,EAACC,eAAgB,SAAhC,SACH,cAAC,IAAD,CAAMC,MAAI,EAACD,eAAgB,SAA3B,SACI,sBAAMV,SAAUR,EAAOoB,aAAvB,SACI,cAAC,IAAD,UACI,eAAC,IAAD,WACI,cAAC,IAAD,aAAWC,MAAM,QACNC,OAAO,UACHtB,EAAOuB,cAAc,WAEnCvB,EAAOwB,QAAQrB,OAASH,EAAOa,OAAOV,MACnC,qBAAKsB,MAAO,CAACC,MAAO,MAAOC,YAAa,OAAxC,SAAiD3B,EAAOa,OAAOV,QAC/D,KACJ,cAAC,IAAD,aAAWyB,KAAK,WACLP,MAAM,WACNC,OAAO,UACHtB,EAAOuB,cAAc,cAEnCvB,EAAOwB,QAAQpB,UAAYJ,EAAOa,OAAOT,SACtC,qBAAKqB,MAAO,CAACC,MAAO,OAApB,SAA6B1B,EAAOa,OAAOT,WAC3C,KACJ,cAAC,IAAD,aAAkBiB,MAAO,cACPQ,QAAS,cAAC,IAAD,KACL7B,EAAOuB,cAAc,gBAE1C1B,GAAc,qBAAKiC,IAAKjC,EAAYkC,IAAI,YACxClC,GAAc,cAAC,IAAD,aAAWwB,MAAM,qBACNC,OAAO,UACHtB,EAAOuB,cAAc,aAEnD,cAAC,IAAD,CAAQK,KAAM,SAAUI,QAAS,YAAaN,MAAO,UAArD,6BASvB,C","file":"static/js/8.d38f2730.chunk.js","sourcesContent":["import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {Navigate} from 'react-router-dom';\r\nimport {useAppSelector} from \"../../redux/redux-store\";\r\n\r\nconst Login = () => {\r\n    const isAuth = useAppSelector(state => state.auth.isAuth)\r\n    const captchaUrl = useAppSelector(state => state.auth.captchaUrl)\r\n    const dispatch = useDispatch()\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n            captcha: undefined\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(login(values))\r\n            formik.resetForm()\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 4) {\r\n                errors.password = 'Password mast be more than 2 characters'\r\n            }\r\n            if (!values.captcha) {\r\n                errors.captcha = 'Required';\r\n            } else\r\n            return errors;\r\n        },\r\n    })\r\n    if (isAuth) {\r\n        return <Navigate to={'/'}/>\r\n    }\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormGroup>\r\n                        <TextField label=\"Email\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email ? (\r\n                            <div style={{color: 'red', borderColor: 'red'}}>{formik.errors.email}</div>\r\n                        ) : null}\r\n                        <TextField type=\"password\"\r\n                                   label=\"Password\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password ? (\r\n                            <div style={{color: 'red'}}>{formik.errors.password}</div>\r\n                        ) : null}\r\n                        <FormControlLabel label={'Remember me'}\r\n                                          control={<Checkbox/>}\r\n                                          {...formik.getFieldProps('rememberMe')}\r\n                        />\r\n                        {captchaUrl && <img src={captchaUrl} alt=\"captcha\"/>}\r\n                        {captchaUrl && <TextField label=\"Symbols from image\"\r\n                                                  margin=\"normal\"\r\n                                                  {...formik.getFieldProps('captcha')}\r\n                        />}\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n\r\n        </Grid>\r\n    </Grid>\r\n}\r\nexport default Login\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n    captcha?: string\r\n}\r\n"],"sourceRoot":""}