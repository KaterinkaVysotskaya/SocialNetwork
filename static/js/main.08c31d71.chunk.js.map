{"version":3,"sources":["components/Navbar/Navbar.jsx","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","outils/ErrorSnackBar.tsx","App.tsx","index.tsx","redux/app-reducer.ts","api/api.ts","components/Navbar/Navbar.module.css","outils/error-utils.ts","redux/redux-store.ts","redux/auth-reducer.ts","components/Header/Header.module.css","redux/profile-reducer.ts","redux/dialogs-reducer.ts","outils/object-helpers.ts","redux/Users-reducer.ts"],"names":["Navbar","className","s","nav","item","to","navData","isActive","active","Header","React","memo","props","header","src","loginBlock","isAuth","login","Button","onClick","logout","HeaderContainer","this","getAuthUserData","Component","connect","state","auth","Alert","forwardRef","ref","elevation","variant","CustomizedSnackbars","dispatch","useDispatch","error","useAppSelector","app","handleClose","event","reason","setAppErrorAC","Snackbar","open","autoHideDuration","onClose","severity","sx","width","ProfileContainer","lazy","UsersContainer","Login","DialogsContainer","App","isInitialized","status","useEffect","initializeAppTC","basename","process","LinearProgress","color","fallback","path","element","style","position","top","textAlign","CircularProgress","WithRouterWrap","userId","useParams","ReactDOM","render","store","document","getElementById","APP_SET_STATUS","APP_SET_ERROR","APP_SET_INITIALISED","initialState","appReducer","action","type","setAppStatusAC","authAPI","me","res","data","resultCode","handleServerAppError","axios","isAxiosError","handleServerNetworkError","instance","create","withCredentials","baseURL","headers","usersAPI","getUsers","currentPage","pageSize","get","then","response","follow","post","unfollow","delete","getProfile","console","warn","profileAPI","getStatus","updateStatus","put","module","exports","message","messages","length","rootReducer","combineReducers","profilePage","profileReducer","dialogsPage","dialogsReducer","usersPage","usersReducer","authReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","applyMiddleware","thunkMiddleware","useSelector","SET_USER_DATA","email","setAuthUserData","id","SET_USER_PROFILE","SET_STATUS","posts","likesCount","profile","addPostAC","newPost","setStatus","getUserProfile","filter","p","postId","SEND_MESSAGE","dialogs","name","photo","sendMessageAC","newMessageBody","body","updateObjectInArray","items","itemId","objPropName","newObjProps","map","u","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","users","totalUsersCount","isFetching","followingInProgress","followSuccessAC","unfollowSuccessAC","setCurrentPageAC","toggleIsFetchingAC","toggleFollowingProgressAC","page","totalCount","count","followUnfollowFlow","apiMethod","actionCreator","bind","followed"],"mappings":"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","file":"static/js/main.08c31d71.chunk.js","sourcesContent":["import React from 'react';\r\nimport s from './Navbar.module.css' ;\r\nimport { NavLink } from 'react-router-dom';\r\n\r\n// let classesNew =' ${s.item} ${s.active}';\r\n\r\nconst Navbar = () => {\r\n    return (\r\n    <nav className={s.nav}>\r\n    <div className={s.item}>\r\n      <NavLink  to='/profile' className = { navData => navData.isActive ? s.active : s.item }>Profile</NavLink>\r\n    </div>\r\n    <div className={`${s.item} ${s.active}`}>\r\n      <NavLink to='/dialogs'  className = { navData => navData.isActive ? s.active : s.item }>Messages</NavLink>\r\n    </div>\r\n    <div className={`${s.item} ${s.active}`}>\r\n      <NavLink to='/users'  className = { navData => navData.isActive ? s.active : s.item }>Users</NavLink>\r\n    </div>\r\n    <div className={s.item}>\r\n      <a>News</a>\r\n    </div>\r\n    <div className={s.item}>\r\n      <a>Music</a>\r\n    </div>\r\n    <div className={s.item}>\r\n      <a>Settings</a>\r\n    </div>\r\n  </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport s from './Header.module.css' ;\r\nimport { NavLink } from 'react-router-dom';\r\nimport {HeaderPropsType} from \"./HeaderContainer\";\r\nimport Button from \"@mui/material/Button\";\r\n\r\n\r\nconst Header = React.memo((props: HeaderPropsType) => {\r\n    return <header className={s.header}>\r\n    <img src='http://a.espncdn.com/combiner/i?img=%2Fi%2Fteamlogos%2Fncaa%2F500%2F41.png' />\r\n  \r\n    <div className={s.loginBlock}>\r\n      { props.isAuth\r\n          ? <div> {props.login}  -  <Button onClick={props.logout}>Log out</Button> </div>\r\n          : <NavLink to={'/login'}><Button>Login</Button></NavLink>}\r\n      \r\n    </div>\r\n  </header>\r\n})\r\n\r\nexport default Header;","import React from 'react';\r\nimport Header from './Header';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport { connect } from 'react-redux';\r\nimport {getAuthUserData, logout} from '../../redux/auth-reducer';\r\n\r\n\r\nclass HeaderContainer extends React.Component <HeaderPropsType> {\r\n  componentDidMount() {\r\n    this.props.getAuthUserData()\r\n  }\r\n\r\n\r\n  render() {\r\n    return <Header{...this.props}/>\r\n}\r\n  }\r\nexport type HeaderPropsType =  MapStateToPropsType &  MapDispatchToPropsType\r\ntype MapStateToPropsType = {\r\n  isAuth: boolean\r\n  login: string | null\r\n  email?: string\r\n  id?: number\r\n}\r\ntype MapDispatchToPropsType = {\r\n  getAuthUserData:() => void\r\n  logout:()=>void\r\n}  \r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n  isAuth: state.auth.isAuth,\r\n  login: state.auth.login\r\n})\r\n\r\nexport default connect (mapStateToProps, {getAuthUserData, logout}) (HeaderContainer);","import React from 'react'\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {useAppSelector} from \"../redux/redux-store\";\r\nimport {setAppErrorAC} from \"../redux/app-reducer\";\r\n\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props,\r\n    ref,\r\n) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport default function CustomizedSnackbars() {\r\n    const dispatch = useDispatch()\r\n    const error = useAppSelector(state=>state.app.error)\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Snackbar open={!!error} autoHideDuration={6000} onClose={handleClose}>\r\n                <Alert onClose={handleClose} severity=\"error\" sx={{ width: '100%' }}>\r\n                    {error}\r\n                </Alert>\r\n            </Snackbar>\r\n        </>\r\n    );\r\n}","import React, {Suspense, lazy, useEffect} from \"react\";\nimport './App.css';\nimport Navbar from './components/Navbar/Navbar';\nimport {BrowserRouter, Navigate, Route, Routes, useParams} from 'react-router-dom';\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\nimport CustomizedSnackbars from \"./outils/ErrorSnackBar\";\nimport {useDispatch} from \"react-redux\";\nimport {useAppSelector} from \"./redux/redux-store\";\nimport {initializeAppTC} from \"./redux/app-reducer\";\nimport {CircularProgress, LinearProgress} from \"@mui/material\";\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'));\nconst UsersContainer = React.lazy(() => import('./components/Users/UsersContainer'));\nconst Login = React.lazy(() => import('./components/login/Login'));\nconst DialogsContainer = lazy(() => import(\"./components/dialogs/DialogsContainer\"))\n\nfunction App() {\n    const dispatch = useDispatch()\n    const isInitialized = useAppSelector(state => state.app.isInitialized)\n    const status = useAppSelector(state => state.app.status)\n\n    useEffect(() => {\n        dispatch(initializeAppTC())\n    }, [])\n    if (!isInitialized) {\n        return <div\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\n            <CircularProgress/>\n        </div>\n    }\n    return (\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\n            {status === 'loading' && <LinearProgress color=\"secondary\"/>}\n            <div className='app-wrapper'>\n                <Navbar/>\n                <HeaderContainer/>\n                <CustomizedSnackbars/>\n                <div className='app-wrapper-content'>\n                    <Suspense fallback={<div>Loading...</div>}>\n                        <Routes>\n                            <Route path='/' element={<ProfileContainer/>}/>\n                            <Route path='/users' element={<UsersContainer/>}/>\n                            <Route path='/dialogs' element={<DialogsContainer/>}/>\n                            <Route path='/profile' element={<ProfileContainer/>}/>\n                            <Route path=\"/profile/:userId\" element={<WithRouterWrap/>}/>\n                            <Route path=\"/login\" element={<Login/>}/>\n                            <Route path='/404' element={<h1>404: PAGE NOT FOUND</h1>}/>\n                            <Route path=\"*\" element={<Navigate to='/404'/>}/>\n\n                            {/* <Route path ='/News' element={<News/>} />\n          <Route path ='/Music' element={<Music/>} />\n          <Route path ='/Settings' element={<Settings/>} /> */}\n                        </Routes>\n                    </Suspense>\n                </div>\n            </div>\n        </BrowserRouter>\n    );\n}\nexport default App;\n\nconst WithRouterWrap = () => {\n    let {userId} = useParams();\n    return <ProfileContainer userId={userId}/>\n}\n\n","import React from 'react';\nimport './index.css';\nimport store from \"./redux/redux-store\";\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\n\n \n    ReactDOM.render(\n            <Provider store={store}>\n              <App  />  \n            </Provider>,\n        document.getElementById('root')\n    );\n\n\n\n\n\n\n\n\n","import {Dispatch} from \"redux\";\r\n\r\nimport {handleServerAppError, handleServerNetworkError} from \"../outils/error-utils\";\r\nimport axios from \"axios\";\r\nimport {authAPI} from \"../api/api\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nconst APP_SET_STATUS = 'APP/SET-STATUS'\r\nconst APP_SET_ERROR = 'APP/SET-ERROR'\r\nconst APP_SET_INITIALISED = 'APP_SET_INITIALISED'\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error:  null as null | string,\r\n    isInitialized: false\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: AppActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case APP_SET_STATUS:\r\n            return {...state, status: action.status}\r\n        case APP_SET_ERROR:\r\n            return {...state, error: action.error}\r\n        case APP_SET_INITIALISED:\r\n            return {...state, isInitialized: action.isInitialized}\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const setAppStatusAC =(status: RequestStatusType)=>({type:APP_SET_STATUS, status} as const)\r\n\r\nexport const setAppErrorAC = (error: string | null) => ({type: APP_SET_ERROR, error} as const)\r\n\r\nexport const setAppIitialisedAC = (isInitialized: boolean) => ({type: APP_SET_INITIALISED, isInitialized} as const)\r\n\r\nexport const initializeAppTC = () => async (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        let res = await authAPI.me()\r\n        if (res.data.resultCode === 0) {\r\n            // dispatch(setIsLoggedInAC(true))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (e){\r\n        if (axios.isAxiosError(e)) {\r\n            handleServerNetworkError(e, dispatch)\r\n        }\r\n    } finally {\r\n        dispatch(setAppIitialisedAC(true))\r\n    }\r\n}\r\n\r\nexport type AppActionsType =\r\n    |ReturnType <typeof setAppStatusAC>\r\n    |ReturnType <typeof setAppErrorAC>\r\n    |ReturnType <typeof setAppIitialisedAC>","import axios, {AxiosResponse} from 'axios'\r\nimport {UserType} from \"../redux/Users-reducer\";\r\n\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        'API-KEY': '5fc11a34-7258-4926-8c00-915edb4f940c'\r\n    }\r\n})\r\n type GetUsersResponseType = {\r\n     items: UserType[]\r\n     totalCount: number\r\n     error: null | string\r\n}\r\n\r\n export type ResponseType<T = {}> = {\r\n    resultCode: number\r\n    messages: string[]\r\n    data: T\r\n}\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage: number, pageSize: number) {\r\n        return instance.get<GetUsersResponseType>(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => response.data)\r\n    },\r\n    follow(userId: number) {\r\n        return instance.post<ResponseType>(`follow/${userId}`)\r\n            .then(response => response.data)\r\n\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete<ResponseType>(`follow/${userId}`)\r\n            .then(response => response.data)\r\n    },\r\n    getProfile(userId: number)  {\r\n        console.warn('Obsolete method. Please use profileAPI object');\r\n        return profileAPI.getProfile(userId)\r\n    }\r\n}\r\n\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: number)  {\r\n        return instance.get(`profile/` + userId)\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get('profile/status/' + userId)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<{status: string }, AxiosResponse<ResponseType>>('profile/status', {status: status})\r\n    }\r\n\r\n\r\n}\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<ResponseType<{id: number, email: string, login: string} >>(`auth/me`)\r\n    },\r\n    login(data: LoginParamsType) {\r\n        return instance.post<LoginParamsType, AxiosResponse<ResponseType<{userId: number}>>>('auth/login', data)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>('auth/login')\r\n    }\r\n}\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe?: boolean\r\n    captcha?: boolean\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__E9WQA\",\"item\":\"Navbar_item__1pvoY\",\"active\":\"Navbar_active__JJzMm\"};","import {ResponseType} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setAppErrorAC, setAppStatusAC} from \"../redux/app-reducer\";\r\n\r\n\r\nexport const handleServerNetworkError = (error: {message: string}, dispatch: Dispatch) =>{\r\n    dispatch(setAppErrorAC(error.message))\r\n}\r\n\r\nexport const handleServerAppError = <T> (data: ResponseType<T>, dispatch:Dispatch) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('some error occured'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport usersReducer from \"./Users-reducer\";\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {TypedUseSelectorHook, useSelector} from \"react-redux\";\r\nimport {appReducer} from \"./app-reducer\";\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    app: appReducer\r\n})\r\n\r\nexport type AppStateType = ReturnType <typeof rootReducer>\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\nlet store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)))\r\n\r\nexport const useAppSelector: TypedUseSelectorHook<AppStateType> = useSelector\r\n// @ts-ignore\r\nwindow.store = store\r\n\r\nexport default store","import {Dispatch} from \"redux\"\r\nimport {authAPI, LoginParamsType} from \"../api/api\"\r\nimport {ActionsType} from \"./store\"\r\nimport {handleServerAppError, handleServerNetworkError} from \"../outils/error-utils\";\r\nimport axios from \"axios\";\r\nimport {setAppStatusAC} from \"./app-reducer\";\r\n\r\n\r\ntype initialStateType = typeof initialState\r\n\r\nconst SET_USER_DATA = 'samurai-network/auth/SET_USER_DATA'\r\n\r\n\r\nlet initialState = {\r\n    userId: null as null | number,\r\n    email: null as null | string,\r\n    login: null as null | string,\r\n    isAuth: false,\r\n}\r\n\r\nconst authReducer = (state: initialStateType = initialState, action: ActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.data\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n//ActionCreators\r\nexport const setAuthUserData = (userId: number | null, email: string | null, login: string | null, isAuth: boolean) =>\r\n    ({type: SET_USER_DATA, data: {userId, email, login, isAuth}}) as const\r\n\r\n\r\n//Thunks\r\nexport const getAuthUserData = () => async (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n   let response = await authAPI.me()\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(setAuthUserData(response.data.data.id,\r\n                    response.data.data.email,\r\n                    response.data.data.login,\r\n                    true))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            }\r\n}\r\nexport const login = (data: LoginParamsType) =>  async (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try{\r\n        const res = await authAPI.login(data)\r\n        if (res.data.resultCode === 0) {\r\n            // @ts-ignore\r\n            dispatch(getAuthUserData())\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (e) {\r\n        if (axios.isAxiosError(e)) {\r\n            handleServerNetworkError(e, dispatch)\r\n        }\r\n    }\r\n}\r\nexport const logout = () =>  async(dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try{\r\n        const res = await authAPI.logout()\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setAuthUserData(null, null, null, false))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (e){\r\n        if (axios.isAxiosError(e)) {\r\n            handleServerNetworkError(e, dispatch)\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default authReducer ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1s3Oq\",\"loginBlock\":\"Header_loginBlock__3uV6g\"};","import { Dispatch } from \"redux\"\r\nimport { profileAPI, usersAPI } from \"../api/api\"\r\nimport { ProfileType } from \"../components/Profile/ProfileContainer\"\r\nimport { ActionsType, PostType } from \"./store\"\r\n\r\nconst SET_USER_PROFILE = 'SET_USER_PROFILE'\r\nconst SET_STATUS = 'SET_STATUS'\r\n\r\n\r\nexport type initialStateType = {\r\n    posts: Array<PostType>\r\n    profile: null | ProfileType\r\n    status: string\r\n}\r\n\r\nlet initialState: initialStateType  =  {\r\n    posts: [\r\n        { id: 1, message: 'Hi, how are you?', likesCount: 12 },\r\n        { id: 2, message: \"It's my first post\", likesCount: 11 },\r\n        { id: 3, message: \"It's my second post\", likesCount: 11 },\r\n        { id: 4, message: \"It's my third post\", likesCount: 11 },\r\n\r\n    ],\r\n    profile: null,\r\n    status: ''\r\n \r\n}\r\n\r\n const profileReducer = (state:initialStateType = initialState, action: ActionsType): initialStateType => {\r\n     switch (action.type) {\r\n        case 'ADD-POST': {\r\n           let newPost: PostType = {\r\n            id: 5,\r\n            message: action.newPost,\r\n            likesCount: 0\r\n        }\r\n  \r\n             return {\r\n                 ...state, \r\n                posts: [...state.posts, newPost]}\r\n    }\r\n         case \"DELETE-POST\": {\r\n             return {\r\n                 ...state, posts: state.posts.filter(p => p.id != action.postId)}\r\n         }\r\n\r\n         case SET_USER_PROFILE : {\r\n          return   {...state,\r\n                    profile: action.profile }         \r\n        }\r\n        case SET_STATUS : {\r\n          return   {...state,\r\n                    status: action.status }         \r\n        }\r\n          default:\r\n              return state\r\n        \r\n     }\r\n    }\r\n\r\n  \r\nexport const addPostAC = (newPost: string) => {\r\n    return {\r\n        type: 'ADD-POST', newPost\r\n        // newPostElement: newPostElement\r\n    } as const\r\n}\r\nexport const deletPostAC = (postId: number) => {\r\n    return {\r\n        type: 'DELETE-POST', postId\r\n    } as const\r\n}\r\nexport const setUserProfile = (profile: ProfileType) => {\r\n    return {\r\n        type: SET_USER_PROFILE,\r\n        profile\r\n    } as const\r\n}\r\nexport const setStatus = (status: string) => {\r\n    return {\r\n        type: SET_STATUS,\r\n        status\r\n    } as const\r\n}\r\n\r\n\r\n\r\nexport const getUserProfile = (userId: number) => async (dispatch: Dispatch) =>{\r\n   let response = await  usersAPI.getProfile(userId)\r\n        dispatch(setUserProfile(response.data))\r\n}\r\n  \r\nexport const getStatus = (userId: number) => async (dispatch: Dispatch) =>{\r\n   let response = await profileAPI.getStatus(userId)\r\n            dispatch(setStatus(response.data))\r\n}\r\nexport const updateStatus = (status: string ) => async (dispatch:  Dispatch) =>{\r\n   let response = await profileAPI.updateStatus(status)\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(setStatus(status))\r\n        }\r\n}\r\n  \r\nexport default profileReducer","import { DialogsType, ActionsType, MessageType } from \"./store\"\r\n\r\nconst SEND_MESSAGE = 'SEND_MESSAGE'\r\n\r\n type initialStateType = typeof initialState\r\n\r\nlet initialState =  {\r\n    dialogs: [\r\n        { id: 1, name: 'Dimych', photo: 'https://wallpaperaccess.com/full/1137909.jpg' },\r\n        {\r\n            id: 2,\r\n            name: 'Andrew',\r\n            photo: 'https://w-dog.ru/wallpapers/1/0/486999962535069/revolyucioner-kak-simvol-svobody-i-silnogo-duxa.jpg'\r\n        },\r\n        { id: 3, name: 'Denis', photo: 'http://media.filmz.ru/photos/full/f_102338.jpg' },\r\n        { id: 4, name: 'Sacha', photo: 'http://fanhair.ru/wp-content/uploads/2018/07/10.jpg' },\r\n        {\r\n            id: 5,\r\n            name: 'Victor',\r\n            photo: 'https://i.pinimg.com/736x/3c/ec/d8/3cecd89ac384bbbea155b3a12c38f855--gabriel-aubry-boss-black.jpg'\r\n        },\r\n        {\r\n            id: 6,\r\n            name: 'Valera',\r\n            photo: 'https://avatars.photodoska.ru/upload/23-11-17/7facdadcf2f82169ff799dce5951794d.jpeg'\r\n        },\r\n    ] as Array<DialogsType>,\r\n    messages: [\r\n        { id: 1, message: 'Hi' },\r\n        { id: 2, message: 'How are you' },\r\n        { id: 3, message: 'Will you be mine?' },\r\n        { id: 4, message: 'Yo' },\r\n        { id: 5, message: 'Hi' },\r\n        { id: 6, message: 'Hi' },\r\n    ] as Array<MessageType>,\r\n}\r\n\r\n\r\n  const dialogsReducer = (state :initialStateType = initialState, action: ActionsType): initialStateType => {\r\n    switch (action.type) {\r\n           case SEND_MESSAGE :\r\n               let body =  action.newMessageBody\r\n             return  { \r\n                 ...state, \r\n                messages:[...state.messages, { id: 7, message: body }]\r\n            } \r\n        default: \r\n             return state\r\n      }\r\n}\r\nexport const sendMessageAC = (newMessageBody: string) => {\r\n    return {\r\n        type: SEND_MESSAGE, newMessageBody\r\n         \r\n    } as const\r\n}\r\n\r\nexport default dialogsReducer","import {UserType} from \"../redux/Users-reducer\";\r\n\r\nexport const updateObjectInArray = (items: UserType[], itemId: number, objPropName: string, newObjProps: {followed: boolean}): UserType[] => {\r\n    return items.map(u => {\r\n        //@ts-ignore\r\n        if (u[objPropName] === itemId) {\r\n            return { ...u, ...newObjProps}\r\n        } else {\r\n            return u\r\n        }\r\n    })\r\n}","import {AnyAction, Dispatch} from \"redux\"\r\nimport { usersAPI } from \"../api/api\"\r\nimport { ActionsType, PostType } from \"./store\"\r\nimport {updateObjectInArray} from \"../outils/object-helpers\";\r\n\r\n\r\n// followed: false\r\n// id: 23850\r\n// name: \"yura_react\"\r\n// photos: {small: null, large: null}\r\n// status: null\r\n// uniqueUrlName: null\r\n\r\ntype PhotosType = {\r\n    small: string\r\n    large: string\r\n}\r\n\r\nexport  type UserType ={\r\n     id: number\r\n     photos: PhotosType\r\n     followed: boolean\r\n     name: string\r\n     status: string\r\n     location: {city: string , country: string}, \r\n }\r\n\r\ntype initialStateType = typeof initialState\r\n\r\n\r\nconst FOLLOW = 'FOLLOW'\r\nconst UNFOLLOW = 'UNFOLLOW'\r\nconst SET_USERS = 'SET_USERS'\r\nconst SET_CURRENT_PAGE='SET_CURRENT_PAGE'\r\nconst SET_TOTAL_USERS_COUNT='SET_TOTAL_USERS_COUNT'\r\nconst TOGGLE_IS_FETCHING='TOGGLE_IS_FETCHING'\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS='TOGGLE_IS_FOLLOWING_PROGRESS'\r\n\r\nlet initialState  =  {\r\n    users: [\r\n        // { id: 1, photoUrl: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRnf8eOGp6TmOTD-uhITActxL0ptYKB_kM28w&usqp=CAU', followed: false, fullName: 'Katya', status: 'I am goddess', location: {city: 'Minsk', country: 'Belarus'} },\r\n        // { id: 2, photoUrl: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQIN1gwlCld-PW_qX5QxwNMdPUff8gYhTOe8w&usqp=CAU', followed: true, fullName: 'Arina', status: 'I am goddess too', location: {city: 'Minsk', country: 'Belarus'} },\r\n        // { id: 3, photoUrl: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcR-FcYGoYWqVnEb-q4md_15Yjz-AY6Si689YA&usqp=CAU', followed: false, fullName: 'Milana', status: 'And me!', location: {city: 'Minsk', country: 'Belarus'} },\r\n        // { id: 4, photoUrl: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSM74j9qX_2xFck61A3p1DoOBqKNQr3RXBfSQ&usqp=CAU', followed: false, fullName: 'Olay', status: 'Just Olay', location: {city: 'Minsk', country: 'Belarus'} },\r\n        \r\n\r\n    ] as Array <UserType>,\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress:[]  as any []\r\n \r\n}\r\n\r\n const usersReducer = (state:initialStateType = initialState, action: ActionsType): initialStateType => {\r\n     switch (action.type) {\r\n       case FOLLOW:\r\n           return {\r\n               ...state,\r\n               users: updateObjectInArray(state.users, action.userId, 'id', {followed: true})\r\n           }\r\n           case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: false})\r\n            }\r\n            case SET_USERS:\r\n                return {...state, users: action.users}\r\n            case SET_CURRENT_PAGE:\r\n                return {...state, currentPage: action.currentPage}\r\n            case SET_TOTAL_USERS_COUNT:\r\n                return {...state, totalUsersCount: action.count}\r\n            case TOGGLE_IS_FETCHING:\r\n                return {...state, isFetching: action.isFetching}\r\n            case TOGGLE_IS_FOLLOWING_PROGRESS:\r\n                return {...state, \r\n                    followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id != action.userId)\r\n                }\r\n            \r\n          default:\r\n              return state\r\n        \r\n     }\r\n    }\r\n\r\n  \r\nexport const followSuccessAC = (userId: number) => ({type: FOLLOW, userId}) as const\r\nexport const unfollowSuccessAC =(userId: number) => ({type: UNFOLLOW, userId}) as const\r\nexport const setUsersAC =(users: Array<UserType>) => ({type: SET_USERS, users}) as const\r\nexport const setCurrentPageAC =(currentPage: number) => ({type: SET_CURRENT_PAGE, currentPage}) as const\r\nexport const setTotalUsersCountAC =(totalUsersCount: number) => ({type: SET_TOTAL_USERS_COUNT, count: totalUsersCount}) as const\r\nexport const toggleIsFetchingAC =(isFetching: boolean) => ({type: TOGGLE_IS_FETCHING, isFetching}) as const\r\nexport const toggleFollowingProgressAC =(isFetching: boolean, userId: number) => ({type: TOGGLE_IS_FOLLOWING_PROGRESS, isFetching, userId}) as const\r\n\r\n\r\nexport const getUsers = (page: number, pageSize: number ) =>{\r\n  return async (dispatch: Dispatch) =>{\r\n        dispatch(toggleIsFetchingAC(true))\r\n        dispatch(setCurrentPageAC(page))\r\n\r\n       let data = await usersAPI.getUsers(page, pageSize)\r\n                dispatch(toggleIsFetchingAC(false))\r\n                dispatch(setUsersAC(data.items)) \r\n                dispatch(setTotalUsersCountAC(data.totalCount))\r\n    }\r\n}\r\n\r\nconst followUnfollowFlow = async (dispatch: Dispatch, userId: number, apiMethod: any, actionCreator:(userId: number) => AnyAction ) => {\r\n    dispatch(toggleFollowingProgressAC(true, userId))\r\n\r\n    let data = await apiMethod(userId)\r\n    if (data.resultCode == 0) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(toggleFollowingProgressAC(false, userId))\r\n\r\n}\r\n\r\nexport const follow = (userId: number ) =>{\r\n  return async (dispatch: Dispatch) =>{\r\n      followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), followSuccessAC)\r\n    }\r\n}\r\nexport const unfollow = (userId: number ) =>{\r\n  return async (dispatch: Dispatch) =>{\r\n      followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), unfollowSuccessAC)\r\n    }\r\n}\r\n\r\nexport default usersReducer "],"sourceRoot":""}